#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property clientAccept ${nuklei.streams("tcp", "source#partition")}
property clientAcceptReply ${nuklei.streams("source", "tcp#any")}

property newClientAcceptReplyId1 ${nuklei:newStreamId()}
property newClientAcceptReplyId2 ${nuklei:newStreamId()}

connect await ROUTED_CLIENT
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(clientAccept.buffer)}
        option agrona:writer ${agrona:oneToOneWriter(clientAccept.throttle)}
connected

read [0x00 0x00 0x00 0x01]
read ([0..8]:clientAcceptId1)
read [0x06] "source"
read ([0..8]:clientAcceptRef)
read ([0..8]:correlationId1)

write [0x40 0x00 0x00 0x02]
write ${clientAcceptId1}
write [0x00 0x02 0x00 0x00]
write [0x00 0x02 0x00 0x00]
write flush

write notify CONNECTED_CLIENT_ONE

read [0x00 0x00 0x00 0x01]
read ([0..8]:clientAcceptId2)
read [0x06] "source"
read ([0..8]:clientAcceptRef)
read ([0..8]:correlationId2)

write [0x40 0x00 0x00 0x02]
write ${clientAcceptId2}
write [0x00 0x02 0x00 0x00]
write [0x00 0x02 0x00 0x00]
write flush

write notify CONNECTED_CLIENT_TWO

close
closed

connect await ROUTED_CLIENT
        "agrona://stream/bidirectional"
        option agrona:reader ${agrona:oneToOneReader(clientAcceptReply.throttle)}
        option agrona:writer ${agrona:oneToOneWriter(clientAcceptReply.buffer)}
connected

write await CONNECTED_CLIENT_ONE

# Stream 1 BEGIN
write [0x00 0x00 0x00 0x01]
write ${newClientAcceptReplyId1}
write [0x03] "tcp"
write [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
write ${correlationId1}
write [0x01] [0x7f 0x00 0x00 0x01]
write [0x1f 0x90]
write [0x01] [0x7f 0x00 0x00 0x01]
write [0x9f 0x90]
write flush

write await CONNECTED_CLIENT_TWO

# Stream 2 BEGIN
write [0x00 0x00 0x00 0x01]
write ${newClientAcceptReplyId2}
write [0x03] "tcp"
write [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
write ${correlationId2}
write [0x01] [0x7f 0x00 0x00 0x01]
write [0x1f 0x90]
write [0x01] [0x7f 0x00 0x00 0x01]
write [0x9f 0x91]
write flush

read [0x40 0x00 0x00 0x02]
read ${newClientAcceptReplyId1}
read [0..4]
read [0..4]

write [0x00 0x00 0x00 0x02]
write ${newClientAcceptReplyId1}
write [0x00 0x0d]
write "server data 1"
write flush

read [0x40 0x00 0x00 0x02]
read ${newClientAcceptReplyId2}
read [0..4]
read [0..4]

write [0x00 0x00 0x00 0x02]
write ${newClientAcceptReplyId2}
write [0x00 0x0d]
write "server data 2"
write flush

close
closed
